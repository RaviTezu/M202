Homework: 5.3: Grappling with stale metadata on a mongos

In this problem, you will be grappling with stale metadata on your mongos, and on your replica set.

Suppose through some series of events you end up with a mongos that has stale metadata. You can see this because your document with _id: 90001 should have a different value for the "string" field than the "testStringForPadding0000000000000000000000000000000000000000" that you're currently seeing when you query it.

First, make sure that you have set open read/write permissions for the /data/db directory. We will be using this directory for this problem. Also please make sure you are able to use ports 29000 (for your config server), 30999 (for your mongos), 31100-31102 (for your first replica set), and 31200-31202 (for your second replica set). You may point MongoProc to the appropriate host, but it will assume that these ports are the ones we are using, regardless of what you have specified in the MongoProc settings.

Next, on the host that you'll be using, open your mongo shell without connecting to a mongod instance:

$ mongo --nodb
Now, we will spin up a sharded cluster with 2 shards, each of which has 3 members (a primary, a secondary, and an arbiter) plus one config server. We will do this using ShardingTest as follows.

> cluster = new ShardingTest({shards: 2, chunksize: 1, rs : {nodes : [{}, {}, {arbiter: true}]} });
Give that a minute to spin up and you should see all of your mongod's plus a mongos at port 30999. At this point, you can initialize MongoProc and begin your homework.

Start by initializing with MongoProc. Once you have initialized, your "testDB.testColl" collection will be populated (it will be dropped at the beginning of the initialization if present), and it will be split into chunks, and those chunks will be distributed across each of your shards.

In addition, your balancer will be turned off, and some metadata will have changed (which your mongos is not aware of).

Without turning on your balancer, adding/removing documents, or otherwise modifying your data (or metadata), please correct the stale data problem with your mongos. You should be able to do everything you need to do on just your mongos.

In order to see the problem, look for the document with _id: 90001. Each shard will have its own copy, and the mongos will look for it on the wrong shard. When you get a new value for the "string" field (one that doesn't end with lots of 0's), you've completed the problem.

Answer:
=======
1. You need to run the give command to put up the required instaces. You have to give it a couple of minutes to complete and make sure you have all the instaces up and running. 

2. ravitezu@terminator:~ ps -aef | grep -i mongo
mongodb    970     1  0 19:42 ?        00:00:35 /usr/bin/mongod --config /etc/mongod.conf
root      5693  2566  0 21:09 pts/0    00:00:00 sudo mongo --nodb
root      5694  5693  0 21:09 pts/0    00:00:01 mongo --nodb
root      5697  5694  1 21:09 pts/0    00:00:03 mongod --oplogSize 40 --port 31100 --noprealloc --smallfiles --rest --replSet test-rs0 --dbpath /data/db/test-rs0-0 --setParameter enableTestCommands=1
root      5800  5694  1 21:09 pts/0    00:00:03 mongod --oplogSize 40 --port 31101 --noprealloc --smallfiles --rest --replSet test-rs0 --dbpath /data/db/test-rs0-1 --setParameter enableTestCommands=1
root      5966  5694  1 21:10 pts/0    00:00:03 mongod --oplogSize 1 --port 31102 --noprealloc --smallfiles --rest --replSet test-rs0 --dbpath /data/db/test-rs0-2 --setParameter enableTestCommands=1
root      6171  5694  1 21:10 pts/0    00:00:03 mongod --oplogSize 40 --port 31200 --noprealloc --smallfiles --rest --replSet test-rs1 --dbpath /data/db/test-rs1-0 --setParameter enableTestCommands=1
root      6334  5694  1 21:10 pts/0    00:00:02 mongod --oplogSize 40 --port 31201 --noprealloc --smallfiles --rest --replSet test-rs1 --dbpath /data/db/test-rs1-1 --setParameter enableTestCommands=1
root      6507  5694  1 21:11 pts/0    00:00:02 mongod --oplogSize 1 --port 31202 --noprealloc --smallfiles --rest --replSet test-rs1 --dbpath /data/db/test-rs1-2 --setParameter enableTestCommands=1
root      6713  5694  1 21:11 pts/0    00:00:01 mongod --port 29000 --dbpath /data/db/test-config0 --configsvr --setParameter enableTestCommands=1
root      6831  5694  0 21:12 pts/0    00:00:00 mongos --port 30999 --configdb terminator:29000 --chunkSize 1 --setParameter enableTestCommands=1
root      7127  7091  0 21:13 pts/14   00:00:00 /bin/sh ./mongoProc.sh
root      7132  7127  1 21:13 pts/14   00:00:00 /home/ravitezu/git-hub/M202/week-1/mongoProc_linux_x86_64/./bin/mongoProc
ravitezu  7232  7171  0 21:14 pts/16   00:00:00 grep --color=auto -i mongo

3. As all the intances are up and running, now connect to mongos shell and all you need to do is flush the mongos cache :)
ravitezu@terminator:~ mongo --port 30999
MongoDB shell version: 2.6.1
connecting to: 127.0.0.1:30999/test
mongos> sh.status()
--- Sharding Status --- 
  sharding version: {
	"_id" : 1,
	"version" : 4,
	"minCompatibleVersion" : 4,
	"currentVersion" : 5,
	"clusterId" : ObjectId("5389f84a8be41ada8f1594e3")
}
  shards:
	{  "_id" : "test-rs0",  "host" : "test-rs0/terminator:31100,terminator:31101" }
	{  "_id" : "test-rs1",  "host" : "test-rs1/terminator:31200,terminator:31201" }
  databases:
	{  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }
	{  "_id" : "testDB",  "partitioned" : true,  "primary" : "test-rs0" }
		testDB.testColl
			shard key: { "_id" : 1 }
			chunks:
				test-rs1	12
				test-rs0	9
			too many chunks to print, use verbose if you want to force print

mongos> show dbs
admin   (empty)
config  0.016GB
testDB  0.063GB
mongos> use testDB
switched to db testDB
mongos> show collections
system.indexes
testColl
mongos> db.testColl.find({"_id": 90001})
{ "_id" : 90001, "otherID" : ObjectId("5389f8fa9a85db1c5827f5dc"), "string" : "testStringForPadding0000000000000000000000000000000000000000" }
mongos> 
mongos> 
mongos> use admin
switched to db admin
mongos> db.f
db.forceError(   db.fsyncLock(    db.fsyncUnlock(
mongos> sh.
sh.addShard(              sh.disableBalancing(      sh.isBalancerRunning(     sh.splitAt(               sh.valueOf(
sh.addShardTag(           sh.enableBalancing(       sh.moveChunk(             sh.splitFind(             sh.waitForBalancer(
sh.addTagRange(           sh.enableSharding(        sh.propertyIsEnumerable(  sh.startBalancer(         sh.waitForBalancerOff(
sh.apply(                 sh.getBalancerHost(       sh.prototype              sh.status(                sh.waitForDLock(
sh.bind(                  sh.getBalancerState(      sh.removeShardTag(        sh.stopBalancer(          sh.waitForPingChange(
sh.call(                  sh.hasOwnProperty(        sh.setBalancerState(      sh.toLocaleString(
sh.constructor            sh.help(                  sh.shardCollection(       sh.toString(
mongos> db.adminCommand({flushRouterConfig:1})
{ "flushed" : true, "ok" : 1 }
mongos> db.testColl.find({"_id": 90001})
bye
