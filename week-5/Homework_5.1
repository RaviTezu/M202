Homework: 5.1: Pre-splitting data

For this assignment, you will be pre-splitting chunks into ranges. We'll be working with the "m202.presplit" database/collection.

First, create 3 shards. You can use standalone servers or replica sets on each shard, whatever is most convenient.

Pre-split your collection into chunks with the following ranges, and put the chunks on the appropriate shard, and name the shards "shard0", "shard1", and "shard2". Let's make the shard key the "a" field. Don't worry if you have other ranges as well, we will only be checking for the following:

Range   / Shard
0 to 7 / shard0
7 to 10 / shard0
10 to 14 / shard0
14 to 15 / shard1
15 to 20 / shard1
20 to 21 / shard1
21 to 22 / shard2
22 to 23 / shard2
23 to 24 / shard2
You may have other chunks with other ranges (you undoubtedly will!) but we will only be checking for these. Keep in mind that if your balancer is on, it may move chunks around if it detects an imbalance. Also, remember that you can check the state of your sharded cluster by calling

sh.status(true)

Answer:
=======


1. Start configdb server(s) using the following command:
   mongod --configsvr --dbpath /data/configdb --port 27019

2. Start a mongos instance:
   mongos --configdb terminator:27019 --port 27099

3. Start 3 mongod instances with the following commands:
   mongod --port 27031 --dbpath=/data/db
   mongod --port 27032 --dbpath=/data/db1
   mongod --port 27033 --dbpath=/data/db2

4. Once this is done, You should have 4 mongo processes running on your machine. 

5. Now we need to set the 3 mongod instaces(3 shards) as a cluster, go to the mongos shell:
   mongos --port 27099
   mongos> db.adminCommand({addShard: "terminator:27031", "name":"shard0"})
   mongos> db.adminCommand({addShard: "terminator:27032", "name":"shard1"})
   mongos> db.adminCommand({addShard: "terminator:27033", "name":"shard2"})
   Don't sweat much what "terminator" is here, it is my host name. 

6. Before doing anything to cluster, we should stop the balancer to avoid automatic chunk migrations:
   mongos> sh.stopBalancer()
   mongos> sh.getBalancerState() //should say false here

7. Now we need to create a db m202 with presplit collection in it:
   mongos> use m202
   mongos> db.createCollection("presplit")

8. Now we need to enable sharding on m202 db and shard the Collections using the "a" as shard key:
   mongos> sh.enableSharding("m202")
   mongos> sh.shardCollection("m202.presplit",{"a":1})

9. Now you need to create chunks:
   mongos> for ( var x=0; x<25; x++ ){ db.adminCommand({ split : "m202.presplit" , middle : { a : x } }) 
   Above command will create 26 chunks on shard0 as its primary.

10. sh.status() will show you the chunks under the m202 database.

11. Inoder to move the chunks from one shard to other shard, You can use the following command:
    db.adminCommand( { moveChunk : "m202.presplit", find : {a:14}, to : "terminator:27032"}) 
    I've moved the chunks first according to the question and we need to merge these chunks here according to the ranges.

12. For merging: 
    db.adminCommand( { mergeChunks: "m202.presplit", bounds: [ { "a":0},{"a":2} ] })
    Above command will merge the a:0 --> a:1 and a:1 --> a:2 chunks. 
    So, use the above command accordingly to get the ranges as per the question and sometimes you may need to move the chunks again. 

mongos> sh.status(true)
--- Sharding Status --- 
  sharding version: {
	"_id" : 1,
	"version" : 4,
	"minCompatibleVersion" : 4,
	"currentVersion" : 5,
	"clusterId" : ObjectId("53899ab5505ac666aae1e316")
}
  shards:
	{  "_id" : "shard0",  "host" : "terminator:27031" }
	{  "_id" : "shard1",  "host" : "terminator:27032" }
	{  "_id" : "shard2",  "host" : "terminator:27033" }
  databases:
	{  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }
	{  "_id" : "m202",  "partitioned" : true,  "primary" : "shard0" }
		m202.presplit
			shard key: { "a" : 1 }
			chunks:
				shard0	4
				shard1	3
				shard2	4
			{ "a" : { "$minKey" : 1 } } -->> { "a" : 0 } on : shard0 Timestamp(18, 1) 
			{ "a" : 0 } -->> { "a" : 7 } on : shard0 Timestamp(20, 7) 
			{ "a" : 7 } -->> { "a" : 10 } on : shard0 Timestamp(20, 9) 
			{ "a" : 10 } -->> { "a" : 14 } on : shard0 Timestamp(20, 12) 
			{ "a" : 14 } -->> { "a" : 15 } on : shard1 Timestamp(20, 1) 
			{ "a" : 15 } -->> { "a" : 20 } on : shard1 Timestamp(20, 16) 
			{ "a" : 20 } -->> { "a" : 21 } on : shard1 Timestamp(15, 0) 
			{ "a" : 21 } -->> { "a" : 22 } on : shard2 Timestamp(20, 0) 
			{ "a" : 22 } -->> { "a" : 23 } on : shard2 Timestamp(17, 0) 
			{ "a" : 23 } -->> { "a" : 24 } on : shard2 Timestamp(18, 0) 
			{ "a" : 24 } -->> { "a" : { "$maxKey" : 1 } } on : shard2 Timestamp(19, 0) 

mongos> 

mongos> cluster = new ShardingTest({"shards" : 3, "chunksize" : 1, "config": 3, other:{rs:true} }) can be used to create a shard cluster with 3replica nodes as 3 shards with 3 configdbs.
