Homework: 6.1: Using shard tags to manage data

In this problem we will emulate a data management strategy in which we periodically move data from short-term storage (STS) to long-term storage (LTS). We have implemented this strategy using tag-based sharding.

Start by spinning up a sharded cluster as follows:

$ mongo --nodb
> config = { d0 : { smallfiles : "", noprealloc : "", nopreallocj : ""}, d1 : { smallfiles : "", noprealloc : "", nopreallocj : "" }, d2 : { smallfiles : "", noprealloc : "", nopreallocj : ""}};
> cluster = new ShardingTest( { shards : config } );
This will create 3 standalone shards on ports 30000, 30001, and 30002, as well as a mongos on port 30999. The config portion of the above will eliminate the disk space issues some students have seen when using ShardingTest.

Next, initialize the data in this cluster using MongoProc. You can choose the host you're pointing to, but MongoProc will be looking for the mongos at port 30999.

Following initialization, your system will contain the collection testDB.testColl. Once initial balancing completes, all documents in this collection with a createdDate field value that falls any time in the year 2013 are in LTS and all documents created in 2014 are in STS. There are two shards used for LTS and one shard for STS.

Your assignment is to move all data for the month of January 2014 into LTS as part of periodic maintenance. For this problem we are pretty sure you can "solve" it in a couple of ways that are not ideal. In an ideal solution you will make the balancer do the work for you. Please note that the balancer must be running when you turn in your solution.

Answer:
========
- Create the cluster with above config. You need to wait till the balancer finishes chunk migrations. 

- Once the balancer is done with the job, sh.status() looks like below: 
mongos> sh.status()
--- Sharding Status --- 
  sharding version: {
	"_id" : 1,
	"version" : 4,
	"minCompatibleVersion" : 4,
	"currentVersion" : 5,
	"clusterId" : ObjectId("5394417e9c1f75cf65aa7262")
}
  shards:
	{  "_id" : "shard0000",  "host" : "localhost:30000",  "tags" : [ "LTS" ] }
	{  "_id" : "shard0001",  "host" : "localhost:30001",  "tags" : [ "STS" ] }
	{  "_id" : "shard0002",  "host" : "localhost:30002",  "tags" : [ "LTS" ] }
  databases:
	{  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }
	{  "_id" : "testDB",  "partitioned" : true,  "primary" : "shard0001" }
		testDB.testColl
			shard key: { "createdDate" : 1 }
			chunks:
				shard0002	184
				shard0000	182
				shard0001	121
			too many chunks to print, use verbose if you want to force print
			 tag: LTS  { "createdDate" : ISODate("2013-01-01T00:00:00Z") } -->> { "createdDate" : ISODate("2014-01-01T00:00:00Z") }
			 tag: STS  { "createdDate" : ISODate("2014-01-01T00:00:00Z") } -->> { "createdDate" : ISODate("2014-05-01T00:00:00Z") }

- Now you need to stop the balancer: 
mongos> sh.stopBalancer()
Waiting for active hosts...
Waiting for the balancer lock...
Waiting again for active hosts after balancer is off...
mongos> 
mongos> use config
switched to db config
mongos> db.tags.find()
{ "_id" : { "ns" : "testDB.testColl", "min" : { "createdDate" : ISODate("2013-01-01T00:00:00Z") } }, "max" : { "createdDate" : ISODate("2014-01-01T00:00:00Z") }, "ns" : "testDB.testColl", "tag" : "LTS", "min" : { "createdDate" : ISODate("2013-01-01T00:00:00Z") } }
{ "_id" : { "ns" : "testDB.testColl", "min" : { "createdDate" : ISODate("2014-01-01T00:00:00Z") } }, "max" : { "createdDate" : ISODate("2014-05-01T00:00:00Z") }, "ns" : "testDB.testColl", "tag" : "STS", "min" : { "createdDate" : ISODate("2014-01-01T00:00:00Z") } }

- Now you need to change the tag ranges:
mongos> sh.addTagRange("testDB.testColl", {"createdDate": ISODate("2013-01-01T00:00:00Z")} , {"createdDate": ISODate("2014-02-01T00:00:00Z")}, "LTS")
mongos> sh.addTagRange("testDB.testColl", {"createdDate": ISODate("2014-02-01T00:00:00Z")} , {"createdDate": ISODate("2014-05-01T00:00:00Z")}, "STS")

- I had to remove the STS range from config.tags collection and however, you need to have the below content when you do sh.status():
mongos> sh.status()
--- Sharding Status --- 
  sharding version: {
	"_id" : 1,
	"version" : 4,
	"minCompatibleVersion" : 4,
	"currentVersion" : 5,
	"clusterId" : ObjectId("5394417e9c1f75cf65aa7262")
}
  shards:
	{  "_id" : "shard0000",  "host" : "localhost:30000",  "tags" : [ "LTS" ] }
	{  "_id" : "shard0001",  "host" : "localhost:30001",  "tags" : [ "STS" ] }
	{  "_id" : "shard0002",  "host" : "localhost:30002",  "tags" : [ "LTS" ] }
  databases:
	{  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }
	{  "_id" : "testDB",  "partitioned" : true,  "primary" : "shard0001" }
		testDB.testColl
			shard key: { "createdDate" : 1 }
			chunks:
				shard0002	184
				shard0000	185
				shard0001	118
			too many chunks to print, use verbose if you want to force print
			 tag: LTS  { "createdDate" : ISODate("2013-01-01T00:00:00Z") } -->> { "createdDate" : ISODate("2014-02-01T00:00:00Z") }
			 tag: STS  { "createdDate" : ISODate("2014-02-01T00:00:00Z") } -->> { "createdDate" : ISODate("2014-05-01T00:00:00Z") }

- Now, start the balancer and you will see the chunk migrations, After the chunk migrations sh.status() looks like this:
mongos>sh.startBalancer()
mongos> sh.status()
--- Sharding Status --- 
  sharding version: {
	"_id" : 1,
	"version" : 4,
	"minCompatibleVersion" : 4,
	"currentVersion" : 5,
	"clusterId" : ObjectId("5394417e9c1f75cf65aa7262")
}
  shards:
	{  "_id" : "shard0000",  "host" : "localhost:30000",  "tags" : [ "LTS" ] }
	{  "_id" : "shard0001",  "host" : "localhost:30001",  "tags" : [ "STS" ] }
	{  "_id" : "shard0002",  "host" : "localhost:30002",  "tags" : [ "LTS" ] }
  databases:
	{  "_id" : "admin",  "partitioned" : false,  "primary" : "config" }
	{  "_id" : "testDB",  "partitioned" : true,  "primary" : "shard0001" }
		testDB.testColl
			shard key: { "createdDate" : 1 }
			chunks:
				shard0002	199
				shard0000	198
				shard0001	90
			too many chunks to print, use verbose if you want to force print
			 tag: LTS  { "createdDate" : ISODate("2013-01-01T00:00:00Z") } -->> { "createdDate" : ISODate("2014-02-01T00:00:00Z") }
			 tag: STS  { "createdDate" : ISODate("2014-02-01T00:00:00Z") } -->> { "createdDate" : ISODate("2014-05-01T00:00:00Z") }

- Now test using your mongoproc and turn in!
